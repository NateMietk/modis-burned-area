read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
for(j in 1:length(tiles)){
url = "ftp://fire:burnt@fuoco.geog.umd.edu/MCD64A1/C6/"
u_p = "fire:burnt"
filenames <- RCurl::getURL(paste0(url, tiles[j],"/"), userpwd = u_p, v=T, ftp.use.epsv = FALSE, dirlistonly = TRUE)
filenames = paste0(strsplit(filenames, "\r*\n")[[1]])
for(L in 1:length(filenames)){
output_file_name <- file.path(hdf_months, filenames[L])
if(!file.exists(output_file_name)) {
download.file(paste0(url, tiles[j],"/",filenames[L]),
output_file_name)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
cl <- makeCluster(cores)
registerDoParallel(cl)
foreach (j = 1:length(tiles)) %dopar% {
require(magrittr)
require(raster)
require(MODIS)
require(dplyr)
hdfs = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE)
filename = strsplit(hdfs, "\\.") %>%
lapply(`[`, 2:3) %>%
lapply(paste, collapse = "_") %>%
unlist
outname <- paste0(names, filename, ".tif")
hdfs_full = list.files(hdf_months, pattern = ".hdf",
recursive = TRUE, full.names = TRUE)
read.hdfs <- function(file, ...) {
res <- tryCatch(MODIS::getSds(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
read.rst <- function(file, ...) {
res <- tryCatch(raster::raster(file, ...),
error = function(c) {
c$message <- paste0(c$message, " (in ", file, ")")
warning(c)
} ) }
for (M in 1:length(hdfs_full)) {
sds <- read.hdfs(hdfs_full[M])
r <- read.rst(sds$SDS4gdal[d])
if(!file.exists(paste0(tif_months, "/", outname[M]))) {
raster::writeRaster(r, paste0(tif_months, "/", outname[M]), overwrite=TRUE)
}
}
}
stopCluster(cl)
